// <auto-generated />
using System;
using GdrEngineNet.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GdrEngineNet.Database.Migrations
{
    [DbContext(typeof(GdrDbContext))]
    [Migration("20190615173730_Seed-DefaultRoom")]
    partial class SeedDefaultRoom
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062");

            modelBuilder.Entity("GdrEngineNet.Database.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CharacteristicsId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Experience");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CharacteristicsId");

                    b.HasIndex("UserId");

                    b.ToTable("Characters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CharacteristicsId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Experience = 0,
                            FirstName = "Super",
                            LastName = "User",
                            MiddleName = "Duper",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.CharacterClassRole", b =>
                {
                    b.Property<int>("CharacterId");

                    b.Property<int>("ClassRoleId");

                    b.HasKey("CharacterId", "ClassRoleId");

                    b.HasIndex("ClassRoleId");

                    b.ToTable("CharacterClassRoles");
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.CharacterGuildRole", b =>
                {
                    b.Property<int>("CharacterId");

                    b.Property<int>("GuildRoleId");

                    b.HasKey("CharacterId", "GuildRoleId");

                    b.HasIndex("GuildRoleId");

                    b.ToTable("CharacterGuildRoles");
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.CharacterItem", b =>
                {
                    b.Property<int>("CharacterId");

                    b.Property<int>("ItemId");

                    b.Property<int>("Quantity");

                    b.HasKey("CharacterId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("CharacterItems");
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.CharacterRaceRole", b =>
                {
                    b.Property<int>("CharacterId");

                    b.Property<int>("RaceRoleId");

                    b.HasKey("CharacterId", "RaceRoleId");

                    b.HasIndex("RaceRoleId");

                    b.ToTable("CharacterRaceRoles");
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.CharacteristicsSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Agility");

                    b.Property<int>("Health");

                    b.Property<int>("Intelligence");

                    b.Property<int>("Mana");

                    b.Property<int>("Strength");

                    b.Property<int>("Toughness");

                    b.Property<int>("Willpower");

                    b.HasKey("Id");

                    b.ToTable("CharacteristicsSets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Agility = 50,
                            Health = 50,
                            Intelligence = 50,
                            Mana = 50,
                            Strength = 50,
                            Toughness = 50,
                            Willpower = 50
                        });
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Availability");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.ClassRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClassId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("ClassRole");
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.GameAction", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CharacterId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("RoomId");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("RoomId");

                    b.ToTable("Actions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("GameAction");
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.Guild", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Availability");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Guilds");
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.GuildRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GuildId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("GuildRoles");
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.Identity.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "6335f070-d91f-40ab-aa55-41be6eaa8779",
                            Name = "User",
                            NormalizedName = "user"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "d8088471-beba-4fad-bd5b-e9e0b34ea70d",
                            Name = "Master",
                            NormalizedName = "master"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "b5f188d4-1ccb-4986-a3f6-5e6ad69d4433",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "5476c72b-065c-41ba-ae66-f18d15189cfe",
                            Name = "Moderator",
                            NormalizedName = "moderator"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = "6cc5db89-2ad7-4412-a0c7-91ecf8f19043",
                            Name = "Super",
                            NormalizedName = "super"
                        });
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.Identity.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<short>("EmailConfirmed");

                    b.Property<DateTime>("LastLogin");

                    b.Property<short>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<short>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<short>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "81c584e2-b8a6-4efc-8bc9-f22f9f81480e",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "super@super.ex",
                            EmailConfirmed = (short)1,
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = (short)0,
                            NormalizedEmail = "super@super.ex",
                            NormalizedUserName = "super",
                            PasswordHash = "AQAAAAEAACcQAAAAECm6TqDl5h0FcOAijDz1MEk6PakTxGYsyvsp+1swwPVFhqLsfSRVP5FrCrwp6vgvZA==",
                            PhoneNumberConfirmed = (short)1,
                            SecurityStamp = "",
                            TwoFactorEnabled = (short)0,
                            UserName = "Super"
                        });
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.Identity.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.Identity.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(256);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(256);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.Identity.ApplicationUserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 5
                        });
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.Identity.ApplicationUserToken", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Items");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Item");
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Agility");

                    b.Property<int>("Availability");

                    b.Property<int>("Health");

                    b.Property<int>("Intelligence");

                    b.Property<int>("Mana");

                    b.Property<string>("Name");

                    b.Property<int>("Strength");

                    b.Property<int>("Toughness");

                    b.Property<int>("Willpower");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Races");
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.RaceRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("RaceId");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.ToTable("RaceRoles");
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Default Room",
                            ImageUrl = "",
                            Name = "Default"
                        });
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.DiceAction", b =>
                {
                    b.HasBaseType("GdrEngineNet.Database.Models.GameAction");

                    b.Property<string>("Bonuses");

                    b.Property<string>("Characteristic");

                    b.Property<int>("CharacteristicValue");

                    b.Property<int>("Result");

                    b.Property<int>("RolledDice");

                    b.HasDiscriminator().HasValue("DiceAction");
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.MasterAction", b =>
                {
                    b.HasBaseType("GdrEngineNet.Database.Models.GameAction");

                    b.Property<string>("Text");

                    b.HasDiscriminator().HasValue("MasterAction");
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.ModeratorAction", b =>
                {
                    b.HasBaseType("GdrEngineNet.Database.Models.GameAction");

                    b.Property<string>("Text")
                        .HasColumnName("ModeratorAction_Text");

                    b.HasDiscriminator().HasValue("ModeratorAction");
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.TextAction", b =>
                {
                    b.HasBaseType("GdrEngineNet.Database.Models.GameAction");

                    b.Property<string>("Tag");

                    b.Property<string>("Text")
                        .HasColumnName("TextAction_Text");

                    b.HasDiscriminator().HasValue("TextAction");
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.ConsumableItem", b =>
                {
                    b.HasBaseType("GdrEngineNet.Database.Models.Item");

                    b.Property<int?>("BonusesId");

                    b.Property<int>("Duration");

                    b.HasIndex("BonusesId");

                    b.HasDiscriminator().HasValue("ConsumableItem");
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.EquipableItem", b =>
                {
                    b.HasBaseType("GdrEngineNet.Database.Models.Item");

                    b.Property<int?>("BonusesId")
                        .HasColumnName("EquipableItem_BonusesId");

                    b.HasIndex("BonusesId");

                    b.HasDiscriminator().HasValue("EquipableItem");
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.KeyItem", b =>
                {
                    b.HasBaseType("GdrEngineNet.Database.Models.Item");

                    b.HasDiscriminator().HasValue("KeyItem");
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.Character", b =>
                {
                    b.HasOne("GdrEngineNet.Database.Models.CharacteristicsSet", "Characteristics")
                        .WithMany()
                        .HasForeignKey("CharacteristicsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GdrEngineNet.Database.Models.Identity.ApplicationUser", "User")
                        .WithMany("Characters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.CharacterClassRole", b =>
                {
                    b.HasOne("GdrEngineNet.Database.Models.Character", "Character")
                        .WithMany("CharacterClassRoles")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GdrEngineNet.Database.Models.ClassRole", "ClassRole")
                        .WithMany("CharacterClassRoles")
                        .HasForeignKey("ClassRoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.CharacterGuildRole", b =>
                {
                    b.HasOne("GdrEngineNet.Database.Models.Character", "Character")
                        .WithMany("CharacterGuildRoles")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GdrEngineNet.Database.Models.GuildRole", "GuildRole")
                        .WithMany("CharacterGuildRoles")
                        .HasForeignKey("GuildRoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.CharacterItem", b =>
                {
                    b.HasOne("GdrEngineNet.Database.Models.Character", "Character")
                        .WithMany("CharacterItems")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GdrEngineNet.Database.Models.Item", "Item")
                        .WithMany("CharacterItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.CharacterRaceRole", b =>
                {
                    b.HasOne("GdrEngineNet.Database.Models.Character", "Character")
                        .WithMany("CharacterRaceRoles")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GdrEngineNet.Database.Models.RaceRole", "RaceRole")
                        .WithMany("CharacterRaceRoles")
                        .HasForeignKey("RaceRoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.ClassRole", b =>
                {
                    b.HasOne("GdrEngineNet.Database.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.GameAction", b =>
                {
                    b.HasOne("GdrEngineNet.Database.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GdrEngineNet.Database.Models.Room", "Room")
                        .WithMany("Actions")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.GuildRole", b =>
                {
                    b.HasOne("GdrEngineNet.Database.Models.Guild", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("GdrEngineNet.Database.Models.Identity.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.Identity.ApplicationUserClaim", b =>
                {
                    b.HasOne("GdrEngineNet.Database.Models.Identity.ApplicationUser")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.Identity.ApplicationUserLogin", b =>
                {
                    b.HasOne("GdrEngineNet.Database.Models.Identity.ApplicationUser")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("GdrEngineNet.Database.Models.Identity.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GdrEngineNet.Database.Models.Identity.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.Identity.ApplicationUserToken", b =>
                {
                    b.HasOne("GdrEngineNet.Database.Models.Identity.ApplicationUser")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.RaceRole", b =>
                {
                    b.HasOne("GdrEngineNet.Database.Models.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.ConsumableItem", b =>
                {
                    b.HasOne("GdrEngineNet.Database.Models.CharacteristicsSet", "Bonuses")
                        .WithMany()
                        .HasForeignKey("BonusesId");
                });

            modelBuilder.Entity("GdrEngineNet.Database.Models.EquipableItem", b =>
                {
                    b.HasOne("GdrEngineNet.Database.Models.CharacteristicsSet", "Bonuses")
                        .WithMany()
                        .HasForeignKey("BonusesId");
                });
#pragma warning restore 612, 618
        }
    }
}
